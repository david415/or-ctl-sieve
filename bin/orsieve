#!/usr/bin/env python

# GPL goes here

from twisted.internet.endpoints import serverFromString, clientFromString
from twisted.internet.defer import Deferred
from twisted.internet.task import react

from tubes.protocol import factoryFromFlow
from sys import argv
import click
import json

from or_ctl_sieve import OrControlSieveProxy


@click.command()
@click.option('--listen', default="tcp:interface=127.0.0.1:9876", help='listen endpoint')
@click.option('--connect', default="tcp:127.0.0.1:9051", help='connect endpoint')
@click.argument('config')
def main(listen, connect, config):
    """super paranoid tor control port filtration"""
    click.echo('listen %r' % (listen,))
    click.echo('connect %r' % (connect,))

    config_data = open(config, 'r').read()
    json_fields = json.loads(config_data)[0]

    client_allowed = [s.encode('utf-8') for s in json_fields['client-allowed']]
    client_allowed_prefixes = [s.encode('utf-8') for s in json_fields['client-allowed-prefixes']]
    server_allowed = [s.encode('utf-8') for s in json_fields['server-allowed']]
    server_allowed_prefixes = [s.encode('utf-8') for s in json_fields['server-allowed-prefixes']]
    client_replacements = [s.encode('utf-8') for s in json_fields['client-replacements']]

    def buildProxy(reactor, listen, connect):
        clientEndpoint = clientFromString(reactor, connect)
        serverEndpoint = serverFromString(reactor, listen)
        proxy_sieve = OrControlSieveProxy(clientEndpoint, client_allowed, client_allowed_prefixes, server_allowed, server_allowed_prefixes, client_replacements)
        serverEndpoint.listen(factoryFromFlow(proxy_sieve.new_proxy_flow))
        return Deferred()

    react(buildProxy, [str(listen), str(connect)])

if __name__ == '__main__':
    main()
